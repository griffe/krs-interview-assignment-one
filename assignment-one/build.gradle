plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.1'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'org.springframework.cloud.contract' version '4.1.0'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
}

group = 'com.interview'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '21'
}

jar {
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)

    // Enable archive reproducibility
    preserveFileTimestamps = false
    reproducibleFileOrder = true

    // Include the project's compiled classes
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }

    // Set the main class for the fat jar (update this with your main class)
    manifest {
        attributes 'Main-Class': 'com.interview.assignment.AssignmentApplication'
    }
}

configurations {

    all {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }

    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('snippetsDir', file("build/generated-snippets"))
    set('springCloudVersion', "2023.0.0")
    set('springModulithVersion', "1.1.0")
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'com.fasterxml.jackson.core:jackson-databind'
    implementation 'io.micrometer:micrometer-tracing'
    implementation 'io.micrometer:micrometer-core'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'

    implementation 'org.springframework.boot:spring-boot-starter-log4j2'
    implementation 'org.apache.logging.log4j:log4j-api'
    implementation 'org.apache.logging.log4j:log4j-core'
    implementation 'com.fasterxml.jackson.core:jackson-databind'

    implementation 'io.vavr:vavr:0.10.4'

    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'io.micrometer:micrometer-registry-prometheus'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'
    testImplementation 'io.rest-assured:spring-web-test-client'
    testImplementation 'org.springframework.security:spring-security-test'
}

tasks.named('contractTest') {
    useJUnitPlatform()
}

tasks.named('test') {
    outputs.dir snippetsDir
    useJUnitPlatform()
}

tasks.named('asciidoctor') {
    inputs.dir snippetsDir
    dependsOn test
}

contracts {
    testMode = 'WebTestClient'
    failOnNoContracts = false
}

